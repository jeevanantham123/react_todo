{"version":3,"sources":["history.js","home.js","Google.js","Routes.js","serviceWorker.js","index.js"],"names":["history","App","props","state","task","tasks","handlechange","bind","handlesubmit","e","this","setState","target","value","alert","push","listItems","map","index","key","Container","className","style","onClick","window","location","type","onChange","React","Component","Google","console","log","clientId","onSuccess","onLoginSuccess","onFailure","onloginFailure","cookiePolicy","Routes","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kRAEeA,gB,eC+CEC,G,8DA5Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAACC,KAAK,IACjB,EAAKC,MAAM,GACX,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBALF,E,yDAOHE,GACXC,KAAKC,SAAS,CAACP,KAAKK,EAAEG,OAAOC,U,mCAElBJ,GACU,KAAlBC,KAAKP,MAAMC,KACZU,MAAM,uBAGRJ,KAAKL,MAAMU,KAAKL,KAAKP,MAAMC,MAC3BM,KAAKC,SAAS,CAACP,KAAK,Q,+BAKtB,IAAMY,EAAYN,KAAKL,MAAMY,KAAI,SAACb,EAAKc,GAAN,OAAe,wBAAIC,IAAKD,GAAO,4BAAKd,OACrE,OACE,6BACF,kBAACgB,EAAA,EAAD,CAAWC,UAAU,OACf,oCAGA,4BAAI,4BAAQC,MAAO,CAAC,MAAQ,SAAWC,QAAS,WAAQC,OAAOC,SAAS,MAApE,SACN,8BACA,6CAEA,4BAAI,2BAAOC,KAAK,OAAOb,MAAOH,KAAKP,MAAMC,KAAMuB,SAAUjB,KAAKJ,aAAcgB,MAAO,CAAC,OAAU,UAA9F,OAEA,4BAAQI,KAAK,SAAUH,QAASb,KAAKF,cAArC,gBACA,0CACE,4BAAKQ,U,GArCCY,IAAMC,Y,QCgCTC,E,+KA7BXC,QAAQC,IAAI,WACZR,OAAOC,SAAS,U,uCAGhBM,QAAQC,IAAI,mB,+BAIZ,OACE,kBAACZ,EAAA,EAAD,CAAWC,UAAU,UAEf,6BACE,wBAAIC,MAAO,CAAC,MAAQ,UAApB,oBACE,6BAAM,kBAAC,cAAD,CACNW,SAAS,0EACTC,UAAWxB,KAAKyB,eAChBC,UAAW1B,KAAK2B,eAChBC,aAAc,8B,GAnBTV,IAAMC,WCYZU,E,uKAVX,OACI,kBAAC,IAAD,CAAQvC,QAASA,GACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQwC,OAAK,EAACC,KAAK,IAAKC,UAAWZ,IACnC,kBAAC,IAAD,CAAOW,KAAK,QAASC,UAAWzC,U,GAN/B2B,IAAMC,WCOPc,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCRNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.30920395.chunk.js","sourcesContent":["import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React from 'react';\r\nimport { Container} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nclass App extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state={task:''};\r\n      this.tasks=[];\r\n      this.handlechange=this.handlechange.bind(this);\r\n      this.handlesubmit=this.handlesubmit.bind(this);\r\n      }\r\n      handlechange(e){\r\n        this.setState({task:e.target.value});\r\n      }\r\n      handlesubmit(e){\r\n        if(this.state.task===''){\r\n          alert(\"Enter someting...!\");\r\n        }\r\n        else{\r\n        this.tasks.push(this.state.task);\r\n        this.setState({task:''});\r\n        }\r\n       // console.log(this.tasks);\r\n      }\r\n    render(){\r\n      const listItems = this.tasks.map((task,index) =><li key={index}><h5>{task}</h5></li>);\r\n      return(\r\n        <div>\r\n      <Container className=\"App\">\r\n            <h1>\r\n            TODO\r\n            </h1>\r\n            <h5><button style={{\"float\":\"right\"}}  onClick={() => { window.location=\"/\"}}>Exit</button></h5>\r\n          <form>\r\n          <h4>Got any Todo?\r\n          </h4>\r\n          <h5><input type=\"text\" value={this.state.task} onChange={this.handlechange} style={{\"height\": \"35px\"}}/>\r\n          &nbsp;\r\n          <button type=\"button\"  onClick={this.handlesubmit}>Add to TODO</button></h5>   \r\n          <h4>Todo-List:</h4>\r\n            <ul>{listItems}</ul>\r\n          </form>\r\n       </Container>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default App;","import React from 'react';\nimport './App.css';\nimport {Container} from 'react-bootstrap';\nimport {GoogleLogin} from 'react-google-login';\n\nclass Google extends React.Component{\n  onLoginSuccess(){\n    console.log(\"success\");\n    window.location=\"/home\";\n  }\n  onloginFailure(){\n    console.log(\"login failure\");\n  }\n \n  render(){\n    return(\n      <Container className=\"Google\" >\n          \n            <div>\n              <h1 style={{\"color\":\"white\"}}>ToDo Application</h1>\n                <div ><GoogleLogin \n                clientId=\"88501702451-254empo8bdqh1ao1v8jsulq80enr08ru.apps.googleusercontent.com\"\n                onSuccess={this.onLoginSuccess} \n                onFailure={this.onloginFailure}\n                cookiePolicy={'single_host_origin'}\n                \n                />\n            </div>\n    \t\t   </div>\n      \n      </Container>\n    )\n  }\n}\n\n\nexport default Google;\n","import { Route, Switch,Router} from 'react-router-dom';\r\nimport React from 'react';\r\nimport history from './history';\r\nimport App from './home';\r\nimport Google from './Google';\r\nclass Routes extends React.Component{\r\nrender(){\r\n    return(\r\n        <Router history={history}>\r\n                <Switch>\r\n                    <Route  exact path=\"/\"  component={Google} /> \r\n                    <Route path=\"/home\"  component={App} /> \r\n                </Switch>\r\n        </Router>\r\n    )\r\n}\r\n}\r\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n \n\nReactDOM.render(\n \n    <Routes/>,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}